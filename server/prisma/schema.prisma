generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}


// =================================
// ドメインモデル定義
// =================================

model User {
  id String @id // Cognitoのユーザー識別子(sub)を主キーとする
  email String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  threads Thread[] // ユーザーが参加しているすべてのスレッド
  products Product[]
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  files File[]
}

model File {
  id        String   @id @default(cuid())
  name      String   // アップロードされたファイル名
  s3Key     String   @unique // S3上のオブジェクトキー
  createdAt DateTime @default(now())

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  documentChunks DocumentChunk[]
}

model DocumentChunk {
  id        String   @id @default(cuid())
  content   String   // 分割されたテキスト本文

  embedding Unsupported("vector(1536)")?

  fileId String
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}


model Thread {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  users User[]
  messages Message[]
}

enum AuthorType {
  USER   // 人間ユーザー
  AI     // AIアシスタント
  SYSTEM // システム通知 (将来用)
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  author    AuthorType
  content   String     @db.Text

  threadId String
  thread   Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
}
