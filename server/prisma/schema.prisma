generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// ---------- Enums ----------
enum AuthProvider {
  GOOGLE
}

// ---------- Identity ----------
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]

  tags         Tag[]
  products     Product[]
  requirements Requirement[]
}

model Account {
  id                 String        @id @default(cuid())
  userId             String
  provider           AuthProvider
  providerAccountId  String

  accessToken       String?       @db.Text
  refreshToken      String?       @db.Text
  idToken           String?       @db.Text
  expiresAt         DateTime?

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id            String    @id @default(cuid())
  userId        String
  sessionToken  String    @unique
  expires       DateTime

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expires])
}

// ---------- Domain ----------
model Voicing {
  id            String     @id @default(cuid())
  productId     String
  content       String
  source        String
  summary       String?
  impactScore   Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  product           Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  tags              VoicingTag[]
  requirements      VoicingRequirement[]

  @@index([productId, createdAt])
}

model Tag {
  id        String     @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  voicings  VoicingTag[]

  // ユーザー内ユニーク
  @@unique([userId, name])
}

model VoicingTag {
  voicingId String
  tagId     String
  createdAt DateTime @default(now())

  voicing   Voicing @relation(fields: [voicingId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([voicingId, tagId])
}

model Product {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  content     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  voicings     Voicing[]
  requirements Requirement[]
  features     Feature[]

  @@index([userId])
}



// ---------- Requirement Management ----------
model Requirement {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  title       String
  content     String?
  priority    Int      @default(50) // 数値（0-100）
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  product      Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  voicings     VoicingRequirement[]
  features     RequirementFeature[]

  @@index([userId, productId])
  @@index([priority])
}

model VoicingRequirement {
  voicingId     String
  requirementId String
  createdAt     DateTime @default(now())

  voicing     Voicing     @relation(fields: [voicingId], references: [id], onDelete: Cascade)
  requirement Requirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

  @@id([voicingId, requirementId])
}

// ---------- Feature Management ----------
model Feature {
  id          String   @id @default(cuid())
  productId   String
  name        String
  description String?  // ユーザー自由記入（ステータス含む）
  priority    Int      @default(50) // 数値（0-100）
  effort      Int?     // 開発工数（ポイント）
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product       Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  requirements  RequirementFeature[]

  @@index([productId])
  @@index([priority])
}

model RequirementFeature {
  requirementId String
  featureId     String
  createdAt     DateTime @default(now())

  requirement Requirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)
  feature     Feature     @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@id([requirementId, featureId])
}
