// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// ---------- Enums ----------
enum AuthProvider {
  GOOGLE
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

// ---------- Identity ----------
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]

  voicings  Voicing[]
  tags      Tag[]
}

model Account {
  id                 String        @id @default(cuid())
  userId             String
  provider           AuthProvider
  providerAccountId  String

  accessToken       String?       @db.Text
  refreshToken      String?       @db.Text
  idToken           String?       @db.Text
  expiresAt         DateTime?

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id            String    @id @default(cuid())
  userId        String
  sessionToken  String    @unique
  expires       DateTime

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expires])
}

// ---------- Domain ----------
model Voicing {
  id            String     @id @default(cuid())
  userId        String
  content       String
  source        String
  summary       String?
  sentiment     Sentiment?
  impactScore   Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags          VoicingTag[]

  @@index([userId, createdAt])
}

model Tag {
  id        String     @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  voicings  VoicingTag[]

  // ユーザー内ユニーク
  @@unique([userId, name])
}

model VoicingTag {
  voicingId String
  tagId     String
  createdAt DateTime @default(now())

  voicing   Voicing @relation(fields: [voicingId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([voicingId, tagId])
}
