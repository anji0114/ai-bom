// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // このユーザーに紐づく認証・セッション情報
  accounts  Account[]
  sessions  Session[]
  
  // このユーザーが所有するVoCとタグ
  voicings  Voicing[]
  tags      Tag[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String  // "google"
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// --- アプリケーションコア機能モデル ---

model Voicing {
  id            String    @id @default(cuid())
  content       String
  source        String
  summary       String?
  sentiment     Sentiment?
  impactScore   Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // どのユーザーに紐づくか
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // このVoCに付けられたタグ
  tags          VoicingTag[]
}

model Tag {
  id          String    @id @default(cuid())
  name        String
  
  // どのユーザーに紐づくか
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  voicings    VoicingTag[]
  
  // タグ名はユーザーごとにユニーク
  @@unique([userId, name])
}

model VoicingTag {
  voicingId String
  tagId     String
  voicing   Voicing @relation(fields: [voicingId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  @@id([voicingId, tagId])
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}